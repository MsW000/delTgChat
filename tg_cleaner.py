import os
import sys
import asyncio
from telethon import TelegramClient
from tqdm.asyncio import tqdm_asyncio

# üß† –ö–æ–¥–∏—Ä–æ–≤–∫–∞: –≤–∫–ª—é—á–∞–µ–º UTF-8 –¥–ª—è Windows
if sys.platform.startswith("win"):
    os.system("chcp 65001 >nul")

# ‚öôÔ∏è –°–∏–º–≤–æ–ª—ã: —Ñ–ª–∞–≥ –Ω–∞ —Å–ª—É—á–∞–π --ascii
USE_ASCII = "--ascii" in sys.argv

def mark(emoji: str, fallback: str = "") -> str:
    return fallback if USE_ASCII else emoji

# üîê Telegram API
api_id = 24585917
api_hash = '402600655279206f54d3a32af08d5161'

session = 'session_name'
batch_size = 100

async def main():
    deleted_count = 0
    batch = []

    async with TelegramClient(session, api_id, api_hash) as client:
        me = await client.get_me()
        dialogs = await client.get_dialogs()
        groups = [d for d in dialogs if d.is_group]

        if not groups:
            print(f"{mark('‚ùó','[!]')} –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        print(f"\n{mark('üìã','[Group List]')} –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É:")
        for i, group in enumerate(groups):
            print(f"{i + 1}. {group.name}")

        try:
            index = int(input(f"\n{mark('üì•','>>')} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: ")) - 1
            if not (0 <= index < len(groups)):
                raise ValueError()
        except ValueError:
            print(f"{mark('‚ùå','[X]')} –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return

        target_group = groups[index]
        print(f"\n{mark('üîç','>')} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {target_group.name}")

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f"{mark('üì¶','[~]')} –°—á–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
        total = 0
        async for message in client.iter_messages(target_group, reverse=True):
            if message.sender_id == me.id:
                total += 1

        if total == 0:
            print(f"{mark('‚ÑπÔ∏è','[i]')} –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        confirm = input(f"{mark('‚ö†Ô∏è','[!!!]')} –£–¥–∞–ª–∏—Ç—å {total} —Å–æ–æ–±—â–µ–Ω–∏–π? (y/n): ").lower()
        if confirm != "y":
            print(f"{mark('üö´','[X]')} –û—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        print(f"{mark('üßπ','[deleting]')} –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        async for message in tqdm_asyncio(
            client.iter_messages(target_group, reverse=True), total=total
        ):
            if message.sender_id == me.id:
                batch.append(message.id)
                if len(batch) >= batch_size:
                    try:
                        await client.delete_messages(target_group, batch)
                        deleted_count += len(batch)
                        batch.clear()
                    except Exception as e:
                        print(f"{mark('‚ö†Ô∏è','[!]')} –û—à–∏–±–∫–∞: {e}")

        if batch:
            try:
                await client.delete_messages(target_group, batch)
                deleted_count += len(batch)
            except Exception as e:
                print(f"{mark('‚ö†Ô∏è','[!]')} –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

        print(f"\n{mark('‚úÖ','[OK]')} –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count} –∏–∑ {total}")

if __name__ == "__main__":
    asyncio.run(main())
